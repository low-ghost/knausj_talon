(question | questo) [mark]: "?"
squig: "~"
(bang | exclamation point): "!"
dollar [sign]: "$"
(downscore | underscore): "_"
(colon | coal): ":"
(paren | left paren | lub): "("
(rparen | are paren | right paren | rub): ")"
(bracket | brack | left bracket | lace): "{"
(rbrack | are bracket | right bracket | race): "}"
(left square | lack): "["
(right square | rack): "]"
(angle | left angle | less than): "<"
(rangle | are angle | right angle | greater than): ">"
(asterisk | as trick): "*"
(pound | hash [sign] | octo | thorpe | number sign): "#"
percent [sign]: "%"
caret: "^"
at sign: "@"
(and sign | ampersand ): "&"
pipe: "|"
quoth: "'"
(dubquote | double quote | double quoth | dubquoth): '"'
triple (quote | quoth): "'''"
(dot dot | dotdot): ".."
ellipses: "â€¦"
(comma and | spamma): ", "
plus: "+"
arrow: "->"
dub arrow: "=>"
op dub: " => "
(op | pad) (colon | coal): " : "
indirect: "&"
dereference: "*"
(op equal | assign): " = "
op (minus | subtract | sub): " - "
op (plus | add): " + "
op (times | multiply): " * "
op divide: " / "
op mod: " % "
[op] (minus | subtract | sub) equal: " -= "
[op] (plus | add) equal: " += "
[op] (times | multiply) equal: " *= "
[op] divide equal: " /= "
[op] mod equal: " %= "
(op | is) greater [than]: " > "
(op | is) less [than]: " < "
(op | is) equal: " == "
(op | is) not equal: " != "
(op | is) greater [than] or equal: " >= "
(op | is) less [than] or equal: " <= "
(op (power | exponent) | to the power [of]): " ** "
(op | logical) and: " && "
op or: " || "
[op] (logical | bitwise) and: " & "
[op] bitwise or: " | "
[op] logical or: " || "
(op | logical | bitwise) (ex | exclusive) or: " ^ "
[(op | logical | bitwise)] (left shift | shift left): " << "
[(op | logical | bitwise)] (right shift | shift right): " >> "
(op | logical | bitwise) and equal: " &= "
(op | logical | bitwise) or equal: " |= "
(op | logical | bitwise) (ex | exclusive) or equal: " ^= "
[(op | logical | bitwise)] (left shift | shift left) equal: " <<= "
[(op | logical | bitwise)] (left right | shift right) equal: " >>= "
(op | is) trip equal: " === "
(op | is) not trip equal: " !== "
and and: " && "
